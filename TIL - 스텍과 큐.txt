가.stack은 데이터를 쌓는 구조
LIFO(Last In First Out) 나중에 들어온놈이 먼저 나간다.
ex) 막다른 길에 줄지어 들어온 자동차들, 프링글스
입출력 방향이 하나, 제한적 접근
데이터를 넣는 것은 push, 데이터를 꺼내는 것은 pop
데이터를 하나씩 넣고 뺄수 있음.
브라우저 뒤로가기 앞으로가기 등에 활용
나. Queue은 데이터를 쌓는 구조
FIFO(First In First Out) 먼저 들어온 녀석이 먼저 빠이한다.
ex) 톨게이트, 맛집 줄서기, 선입선출
데이터를 하나씩만 넣기 빼기 가능
두 개의 입출력 방향을 갖고 있음.
프린터 순서대로 출력, 버퍼링 등에 사용
다. 오늘 알게 된 문법!
ArraysList 클래스는 Stack을 구현함. 고로 AraayList 객체를 생성했다면 이러한 Stack의 메소드를 쓸 수 있음.
ArrayList<Integer> arrayList = new ArrayList<Integer>();
arrayList.push(); // 스텍에 데이터 추가
arrayList.pop(); //스텍에 맨 위 삭제하고 삭제한 데이터 리턴
arrayList.size(); //스택의 크기
arrayList.peek(); // 스택의 맨 위 데이터 리턴
arrayList.clear(); // 스택의 데이터 전체삭제
arrayList.empty(); //스택이 비어있는지 맞다면 true, 아니면 false;
LinkedList 클래스는 Queue를 구현함. 객체생성 후 큐 메소드 쓰기 ssap 가능
LinkedList<Interger> linkedList = new LinkedList<>();
linkedList.add(); //queue에 데이터 추가 
linkedList.poll(); //queue에 데이터 삭제하고 삭제한 값 리턴
linkedList.size(); //큐 크기 리턴
linkedList.peek(); // 큐에 가장 먼저 추가된 값 리턴
linkedList.clear(); // 큐에 있는 데이터 다 삭제
String.equals(문자열) -> String의 내용이 문자열과 같은지 같으면 true, 아니면 false